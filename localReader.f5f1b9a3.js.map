{"version":3,"sources":["node_modules/id3js/lib/localReader.js"],"names":["LocalReader","Reader","constructor","path","_path","open","Promise","resolve","reject","fs","stat","err","size","openErr","fd","_fd","close","undefined","Error","read","length","position","buffer","Buffer","alloc","_bytesRead","ab","ArrayBuffer","view","Uint8Array","i"],"mappings":";;;;AAKwC,IAAA,EAAA,QAAA,UAAA,OAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EALxC,IAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,OAIwC,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAjC,MAAMA,UAAoBC,EAA1B,OAIHC,YAAYC,GACR,QACKC,KAAAA,MAAQD,EAGXE,aACK,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACzBC,EAAGC,KAAK,KAAKN,MAAO,CAACO,EAAKD,KAClBC,EACAH,EAAOG,IAGNC,KAAAA,KAAOF,EAAKE,KACjBH,EAAGJ,KAAK,KAAKD,MAAO,IAAK,CAACS,EAASC,KAC3BD,EACAL,EAAOG,IAGNI,KAAAA,IAAMD,EACXP,YAMVS,cACK,OAAA,IAAIV,QAAQ,CAACC,EAASC,UACRS,IAAb,KAAKF,IAITN,EAAGO,MAAM,KAAKD,IAAMJ,IACZA,EACAH,EAAOG,GAGPJ,MARJC,EAAO,IAAIU,MAAM,4BAcvBC,WAAKC,EAAQC,GACTC,MAAAA,EAASC,EAAOC,MAAMJ,GACrB,OAAA,IAAId,QAAQ,CAACC,EAASC,UACRS,IAAb,KAAKF,IAITN,EAAGU,KAAK,KAAKJ,IAAKO,EAAQ,EAAGF,EAAQC,EAAU,CAACV,EAAKc,EAAYH,KACzDX,GAAAA,EACOH,OAAAA,EAAOG,GAEZe,MAAAA,EAAK,IAAIC,YAAYL,EAAOF,QAC5BQ,EAAO,IAAIC,WAAWH,GACvB,IAAA,IAAII,EAAI,EAAGA,EAAIR,EAAOF,OAAQU,IAC/BF,EAAKE,GAAKR,EAAOQ,GAErBvB,EAAQmB,KAZRlB,EAAO,IAAIU,MAAM,6BAlDO,QAAA,YAAA","file":"localReader.f5f1b9a3.js","sourceRoot":"..\\lyrics","sourcesContent":["import { Reader } from './reader.js';\nimport * as fs from 'fs';\n/**\n * Provides read access to the local file system\n */\nexport class LocalReader extends Reader {\n    /**\n     * @param {string} path Path of the local file\n     */\n    constructor(path) {\n        super();\n        this._path = path;\n    }\n    /** @inheritdoc */\n    async open() {\n        return new Promise((resolve, reject) => {\n            fs.stat(this._path, (err, stat) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                this.size = stat.size;\n                fs.open(this._path, 'r', (openErr, fd) => {\n                    if (openErr) {\n                        reject(err);\n                        return;\n                    }\n                    this._fd = fd;\n                    resolve();\n                });\n            });\n        });\n    }\n    /** @inheritdoc */\n    async close() {\n        return new Promise((resolve, reject) => {\n            if (this._fd === undefined) {\n                reject(new Error('Resource not yet open'));\n                return;\n            }\n            fs.close(this._fd, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    /** @inheritdoc */\n    async read(length, position) {\n        const buffer = Buffer.alloc(length);\n        return new Promise((resolve, reject) => {\n            if (this._fd === undefined) {\n                reject(new Error('Resource not yet open'));\n                return;\n            }\n            fs.read(this._fd, buffer, 0, length, position, (err, _bytesRead, buffer) => {\n                if (err) {\n                    return reject(err);\n                }\n                const ab = new ArrayBuffer(buffer.length);\n                const view = new Uint8Array(ab);\n                for (let i = 0; i < buffer.length; i++) {\n                    view[i] = buffer[i];\n                }\n                resolve(ab);\n            });\n        });\n    }\n}\n"]}